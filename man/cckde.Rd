% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cckde.R
\name{cckde}
\alias{cckde}
\alias{dcckde}
\title{Continuous convolution density estimator}
\usage{
cckde(x, bw = NULL, mult = 1, b = 0, ell = 0.5)

dcckde(x, obj)
}
\arguments{
\item{x}{a matrix or data frame containing the data.}

\item{bw}{vector of bandwidth parameter; if \code{NULL}, the bandwidths are
selected automatically by likelihood cross validation.}

\item{mult}{bandwidth multiplier; either a positive number or a vector of
such. Each bandwidth parameter is multiplied with the corresponding
multiplier.}

\item{b}{scale parameter of the UPSB distribution (see, \code{\link[=dupsb]{dupsb()}}).}

\item{ell}{smoothness parameter of the UPSB distribution (see, \code{\link[=dupsb]{dupsb()}}).
The estimator uses the Epanechnikov kernel for smoothing and the UPSB for
continuous convolution (default parameters correspond to the}

\item{obj}{\code{cckde} object.}
}
\description{
The continuous convolution kernel density estimator is defined as the
classical kernel density estimator based on continuously convoluted data (see
\code{\link[=cont_conv]{cont_conv()}}). If a variable should be treated as discrete, declare it as
\code{\link[=ordered]{ordered()}}. \code{\link[=dcckde]{dcckde()}} evaluates the density.
}
\examples{
Z <- rbinom(100, 6, 0.3)  # discrete variable
X <- rexp(100, 5)         # continuous variable
dat <- cbind(Z, X)

fit <- cckde(dat)  # continuous convolution estimate
sum(log(dcckde(dat, fit)))  # log likelihood

}
\references{
Nagler, T. (2017). Nonparametric estimation of probability
densities when some variables are discrete. Unpublished manuscript.
}
